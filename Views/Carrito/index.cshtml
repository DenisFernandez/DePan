@model DePan.Models.Carrito

@{
    ViewData["Title"] = "Mi Carrito";
}

<div class="container">
    <h1 class="mb-4">Mi Carrito de Compras</h1>

    @if (Model.LineaCarritos.Any())
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Productos en el carrito</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var linea in Model.LineaCarritos)
                        {
                            <div class="row align-items-center mb-3 pb-3 border-bottom">
                                <div class="col-md-2">
                                    <img src="@(linea.IdProductoNavigation.ImagenUrl ?? "/images/placeholder.jpg")" 
                                         class="img-fluid rounded" 
                                         alt="@linea.IdProductoNavigation.Nombre"
                                         style="max-height: 80px;">
                                </div>
                                <div class="col-md-4">
                                    <h6 class="mb-1">@linea.IdProductoNavigation.Nombre</h6>
                                    <p class="text-muted small mb-0">@linea.IdProductoNavigation.IdCategoriaNavigation?.Nombre</p>
                                </div>
                                <div class="col-md-2">
                                    <p class="mb-0">@linea.PrecioUnitario.ToString("C")</p>
                                </div>
                                <div class="col-md-2">
                                    <div class="input-group input-group-sm">
                                        <button class="btn btn-outline-secondary" 
                                                onclick="actualizarCantidad(@linea.IdLineaCarrito, @(linea.Cantidad - 1))">-</button>
                                        <input type="number" class="form-control text-center" 
                                               value="@linea.Cantidad" 
                                               id="cantidad-@linea.IdLineaCarrito" 
                                               min="1"
                                               onchange="actualizarCantidad(@linea.IdLineaCarrito, this.value)">
                                        <button class="btn btn-outline-secondary" 
                                                onclick="actualizarCantidad(@linea.IdLineaCarrito, @(linea.Cantidad + 1))">+</button>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <p class="mb-0 fw-bold">@linea.Subtotal.ToString("C")</p>
                                    <button class="btn btn-danger btn-sm mt-1" 
                                            onclick="eliminarProducto(@linea.IdLineaCarrito)">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Resumen del Pedido</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>@Model.Total.ToString("C")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Envío:</span>
                            <span>2,50 €</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total:</strong>
                            <strong>@((Model.Total + 2.50m).ToString("C"))</strong>
                        </div>
                        <div class="d-grid gap-2">
                            <a href="@Url.Action("Checkout", "Pedidos")" class="btn btn-success btn-lg">
                                Proceder al Pago
                            </a>
                            <button class="btn btn-outline-danger" onclick="vaciarCarrito()">
                                Vaciar Carrito
                            </button>
                            <a href="@Url.Action("Index", "Productos")" class="btn btn-outline-primary">
                                Seguir Comprando
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-shopping-cart fa-4x text-muted mb-3"></i>
            <h3>Tu carrito está vacío</h3>
            <p class="text-muted">Agrega algunos productos para continuar</p>
            <a href="@Url.Action("Index", "Productos")" class="btn btn-primary btn-lg">
                Ir a Productos
            </a>
        </div>
    }
</div>

@section Scripts {
    <script>
        async function actualizarCantidad(lineaCarritoId, nuevaCantidad) {
            if (nuevaCantidad < 1) return;
            
            try {
                const response = await fetch('@Url.Action("ActualizarCantidad", "Carrito")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ lineaCarritoId, cantidad: parseInt(nuevaCantidad) })
                });

                const result = await response.json();
                
                if (result.success) {
                    // Recargar la página para ver los cambios
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al actualizar la cantidad');
            }
        }

        async function eliminarProducto(lineaCarritoId) {
            if (!confirm('¿Estás seguro de que quieres eliminar este producto del carrito?')) {
                return;
            }

            try {
                const response = await fetch('@Url.Action("Eliminar", "Carrito")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ lineaCarritoId })
                });

                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al eliminar el producto');
            }
        }

        async function vaciarCarrito() {
            if (!confirm('¿Estás seguro de que quieres vaciar todo el carrito?')) {
                return;
            }

            try {
                const response = await fetch('@Url.Action("Vaciar", "Carrito")', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al vaciar el carrito');
            }
        }
    </script>
}